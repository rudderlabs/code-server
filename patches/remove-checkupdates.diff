Index: code-server/lib/vscode/src/vs/workbench/browser/client.ts
===================================================================
--- code-server.orig/lib/vscode/src/vs/workbench/browser/client.ts
+++ code-server/lib/vscode/src/vs/workbench/browser/client.ts
@@ -5,7 +5,6 @@ import { CommandsRegistry } from '../../
 import { ILogService } from '../../platform/log/common/log.js';
 import { INotificationService, Severity } from '../../platform/notification/common/notification.js';
 import { IProductService } from '../../platform/product/common/productService.js';
-import { IStorageService, StorageScope, StorageTarget } from '../../platform/storage/common/storage.js';
 
 export class CodeServerClient extends Disposable {
 	static LOGOUT_COMMAND_ID = 'code-server.logout';
@@ -14,7 +13,6 @@ export class CodeServerClient extends Di
 		@ILogService private logService: ILogService,
 		@INotificationService private notificationService: INotificationService,
 		@IProductService private productService: IProductService,
-		@IStorageService private storageService: IStorageService,
 	) {
 		super();
 	}
@@ -82,10 +80,6 @@ export class CodeServerClient extends Di
 			});
 		}
 
-		if (this.productService.updateEndpoint) {
-			this.checkUpdates(this.productService.updateEndpoint)
-		}
-
 		if (this.productService.logoutEndpoint) {
 			this.addLogoutCommand(this.productService.logoutEndpoint);
 		}
@@ -95,56 +89,6 @@ export class CodeServerClient extends Di
 		}
 	}
 
-	private checkUpdates(updateEndpoint: string) {
-		const getUpdate = async (updateCheckEndpoint: string): Promise<void> => {
-			this.logService.debug('Checking for update...');
-
-			const response = await fetch(updateCheckEndpoint, {
-				headers: { Accept: 'application/json' },
-			});
-			if (!response.ok) {
-				throw new Error(response.statusText);
-			}
-			const json = await response.json();
-			if (json.error) {
-				throw new Error(json.error);
-			}
-			if (json.isLatest) {
-				return;
-			}
-
-			const lastNoti = this.storageService.getNumber('csLastUpdateNotification', StorageScope.APPLICATION);
-			if (lastNoti) {
-				// Only remind them again after 1 week.
-				const timeout = 1000 * 60 * 60 * 24 * 7;
-				const threshold = lastNoti + timeout;
-				if (Date.now() < threshold) {
-					return;
-				}
-			}
-
-			this.storageService.store('csLastUpdateNotification', Date.now(), StorageScope.APPLICATION, StorageTarget.MACHINE);
-
-			this.notificationService.notify({
-				severity: Severity.Info,
-				message: `[code-server v${json.latest}](https://github.com/cdr/code-server/releases/tag/v${json.latest}) has been released!`,
-			});
-		};
-
-		const updateLoop = (): void => {
-			getUpdate(updateEndpoint)
-				.catch(error => {
-					this.logService.debug(`failed to check for update: ${error}`);
-				})
-				.finally(() => {
-					// Check again every 6 hours.
-					setTimeout(updateLoop, 1000 * 60 * 60 * 6);
-				});
-		};
-
-		updateLoop();
-	}
-
 	private addLogoutCommand(logoutEndpoint: string) {
 		CommandsRegistry.registerCommand(CodeServerClient.LOGOUT_COMMAND_ID, () => {
 			const logoutUrl = new URL(logoutEndpoint, window.location.href);
