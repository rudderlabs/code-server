name: build-docker
on:
  workflow_dispatch:
    inputs:
      version:
        description: The version to use (include "v", i.e. "v4.9.1"). If not provided, will try to download artifacts from main branch.
        type: string
        required: false
      run_id:
        description: The workflow run ID to download artifacts from (leave empty for current workflow or latest)
        type: string
        required: false

permissions:
  id-token: write # allows the JWT to be requested from GitHub's OIDC provider
  contents: read # This is required for actions/checkout

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  arch_amd64: amd64
  arch_arm64: arm64
  docker_images: |
    name=rudderstack/profiles-code-server
  docker_tags: |
    type=raw,value=latest

jobs:
  metadata:
    runs-on: ubuntu-latest
    outputs:
      labels: ${{ steps.meta.outputs.labels }}
      build-date: ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
      version: ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
      revision: ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
      tags: ${{ steps.meta.outputs.tags }}
      arm64_tags: ${{ steps.arm64_meta.outputs.tags }}
      arm64_labels: ${{ steps.arm64_meta.outputs.labels }}
      amd64_tags: ${{ steps.amd64_meta.outputs.tags }}
      amd64_labels: ${{ steps.amd64_meta.outputs.labels }}
    steps:
      - name: docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.docker_images }}
          tags: ${{ env.docker_tags }}
      - name: docker arm64 meta
        id: arm64_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.docker_images }}
          tags: ${{ env.docker_tags }}
          flavor: |
            suffix=-${{ env.arch_arm64 }},onlatest=true
      - name: docker amd64 meta
        id: amd64_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.docker_images }}
          tags: ${{ env.docker_tags }}
          flavor: |
            suffix=-${{ env.arch_amd64 }},onlatest=true

  download-artifacts:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Get version
        id: get-version
        run: |
          if [ "${{ inputs.version }}" ]; then
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=v4.9.1" >> $GITHUB_OUTPUT
          fi

      - name: Get latest release run ID (if no run_id provided)
        if: ${{ !inputs.run_id }}
        id: get-run-id
        run: |
          RUN_ID=$(gh run list --workflow=release.yaml --status=completed --limit=1 --json databaseId --jq '.[0].databaseId')
          echo "run-id=$RUN_ID" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      - name: Download npm release package
        uses: actions/download-artifact@v4
        with:
          name: npm-release-package
          run-id: ${{ inputs.run_id || steps.get-run-id.outputs.run-id }}
          github-token: ${{ secrets.PAT }}

      - name: Download all release packages (optional)
        uses: actions/download-artifact@v4
        with:
          pattern: release-packages-*
          path: ./release-packages/
          merge-multiple: true
          run-id: ${{ inputs.run_id || steps.get-run-id.outputs.run-id }}
          github-token: ${{ secrets.PAT }}
        continue-on-error: true
      - name: List downloaded files
        run: |
          ls -la
          ls -la release-packages/ || true

      - name: Upload artifacts for build job
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: code-server-packages
          path: |
            **/*.deb

  build:
    needs:
      - metadata
      - download-artifacts
    strategy:
      fail-fast: false
      matrix:
        build-config:
          - os: [self-hosted, Linux, ARM64, ubuntu-22]
            tags: ${{ needs.metadata.outputs.arm64_tags }}
            labels: ${{ needs.metadata.outputs.arm64_labels }}
            platform: linux/arm64
            arch: arm64
          - os: ubuntu-latest
            tags: ${{ needs.metadata.outputs.amd64_tags }}
            labels: ${{ needs.metadata.outputs.amd64_labels }}
            platform: linux/amd64
            arch: amd64
    runs-on: ${{ matrix.build-config.os }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Download artifacts (if available)
        uses: actions/download-artifact@v4
        with:
          name: code-server-packages
          path: .
        continue-on-error: false
      - name: List downloaded files
        run: |
          pwd
          ls -la

      - name: setup buildx
        uses: docker/setup-buildx-action@v3
      - name: docker login
        uses: docker/login-action@v3.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: docker build
        uses: rudderlabs/build-scan-push-action@v1.5.3
        with:
          context: .
          platforms: ${{ matrix.build-config.platform }}
          push: true
          tags: ${{ matrix.build-config.tags }}
          labels: ${{ matrix.build-config.labels }}
          build-args: |
            VERSION=${{ needs.download-artifacts.outputs.version }}
            TARGETARCH=${{ matrix.build-config.arch }}
            GITHUB_PAT=${{ secrets.PAT }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  manifest:
    runs-on: ubuntu-latest
    needs: [build, metadata]
    steps:
      - name: setup buildx
        uses: docker/setup-buildx-action@v3
      - name: docker login
        uses: docker/login-action@v3.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: multi-arch manifest
        run: |
          while read -r tag; do
            echo "$tag"
            arm_tag=$(echo "${{ needs.metadata.outputs.arm64_tags }}" | grep "$tag")
            amd_tag=$(echo "${{ needs.metadata.outputs.amd64_tags }}" | grep "$tag")
            docker buildx imagetools create -t $tag $arm_tag $amd_tag
          done <<< "${{ needs.metadata.outputs.tags }}"
